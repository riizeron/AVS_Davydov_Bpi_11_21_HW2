//------------------------------------------------------------------------------
// container.cpp - содержит функции обработки контейнера
//------------------------------------------------------------------------------

#include "container.h"

//------------------------------------------------------------------------------
// Конструктор контейнера
Container::Container(): len{0} { }

//------------------------------------------------------------------------------
// Деструктор контейнера
Container::~Container() {
    Clear();
}

//------------------------------------------------------------------------------
// Очистка контейнера от элементов (освобождение памяти)
void Container::Clear() {
    for(int i = 0; i < len; i++) {
        delete storage[i];
    }
    len = 0;
}

//------------------------------------------------------------------------------
// Ввод содержимого контейнера из указанного потока
void Container::In(FILE& ifst) {
    while (!feof(&ifst)) {
        if ((storage[len] = Number::StaticIn(ifst)) != 0) {
            len++;
        }
    }
}

//------------------------------------------------------------------------------
// Случайный ввод содержимого контейнера
void Container::InRnd(int size) {
    while (len < size) {
        if ((storage[len] = Number::StaticInRnd()) != nullptr) {
            len++;
        }
    }
}

//------------------------------------------------------------------------------
// Вывод содержимого контейнера в указанный поток
void Container::Out(FILE& ofst) {
    fprintf(&ofst, "%s%d%s", "Container contains ", len, " elements.\n");
    for (int i = 0; i < len; i++) {
        fprintf(&ofst, "%d%s", i + 1,": ");
        storage[i]->Out(ofst);
    }
}

//------------------------------------------------------------------------------
// Вычисление среднего арифметического значения приведенных к действительному числу всех чисел в контейнере
double Container::RealAverage() {
    double sum = 0.0;
    for (int i = 0; i < len; i++) {
        sum += storage[i]->Real();
    }
    return sum / len;
}

//------------------------------------------------------------------------------
// Удаление элементов контейнера, действительное значение которых меньше среднего.
void Container::DeleteLowerThanAverage() {
    double aver = Container::RealAverage();
    int counter = 0;
    for (int i = 0; i < len; i++) {
        if (storage[i]->Real() >= aver) {
            storage[counter] = storage[i];
            counter++;
        }
        else {
            delete storage[i];
        }
    }
    len = counter;
}




